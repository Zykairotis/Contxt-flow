{
  "comment": "ReasoningBank-Enhanced Claude Code Settings - Copy sections to .claude/settings.json",
  "env": {
    "CLAUDE_FLOW_AUTO_COMMIT": "false",
    "CLAUDE_FLOW_AUTO_PUSH": "false",
    "CLAUDE_FLOW_HOOKS_ENABLED": "true",
    "CLAUDE_FLOW_TELEMETRY_ENABLED": "true",
    "CLAUDE_FLOW_REMOTE_EXECUTION": "true",
    "CLAUDE_FLOW_CHECKPOINTS_ENABLED": "true",
    "REASONINGBANK_ENABLED": "true"
  },
  "permissions": {
    "allow": [
      "Bash(npx claude-flow:*)",
      "Bash(npm run lint)",
      "Bash(npm run test:*)",
      "Bash(npm test:*)",
      "Bash(git status)",
      "Bash(git diff:*)",
      "Bash(git log:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push)",
      "Bash(git config:*)",
      "Bash(git tag:*)",
      "Bash(git branch:*)",
      "Bash(git checkout:*)",
      "Bash(git stash:*)",
      "Bash(jq:*)",
      "Bash(node:*)",
      "Bash(which:*)",
      "Bash(pwd)",
      "Bash(ls:*)"
    ],
    "deny": [
      "Bash(rm -rf /)"
    ]
  },
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "comment": "Query ReasoningBank before bash commands (adds <10ms)",
            "command": "cat | jq -r '.tool_input.command // empty' | tr '\\n' '\\0' | xargs -0 -I {} bash -c 'CMD=\"{}\"; PATTERNS=$(npx claude-flow@alpha memory query \"$CMD\" --reasoningbank --limit 2 --format json 2>/dev/null || echo \"{}\"); if echo \"$PATTERNS\" | jq -e \".results | length > 0\" > /dev/null 2>&1; then COUNT=$(echo \"$PATTERNS\" | jq \".results | length\"); echo \"üìö Found $COUNT ReasoningBank pattern(s)\" >&2; fi; npx claude-flow@alpha hooks pre-command --command \"$CMD\" --validate-safety true'"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "comment": "Load code patterns before editing",
            "command": "cat | jq -r '.tool_input.file_path // .tool_input.path // empty' | tr '\\n' '\\0' | xargs -0 -I {} bash -c 'FILE=\"{}\"; if [ -n \"$FILE\" ]; then EXT=\"${FILE##*.}\"; PATTERNS=$(npx claude-flow@alpha memory query \"$EXT code patterns\" --namespace code --reasoningbank --limit 2 2>/dev/null || echo \"\"); if [ -n \"$PATTERNS\" ]; then echo \"üìö Loaded $EXT patterns from ReasoningBank\" >&2; fi; fi; npx claude-flow@alpha hooks pre-edit --file \"$FILE\" --auto-assign-agents true'"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "comment": "Store successful bash patterns in ReasoningBank",
            "command": "cat | jq -r '.tool_input.command // empty' | tr '\\n' '\\0' | xargs -0 -I {} bash -c 'CMD=\"{}\"; EXIT_CODE=$(jq -r \".result.exit_code // \\\"1\\\"\" 2>/dev/null); if [ \"$EXIT_CODE\" = \"0\" ]; then KEY=\"cmd_$(echo -n \"$CMD\" | md5sum 2>/dev/null | cut -d\" \" -f1 || echo $(date +%s))\"; DESC=\"Successful: $CMD\"; npx claude-flow@alpha memory store \"$KEY\" \"$DESC\" --namespace commands --reasoningbank --confidence 0.6 2>/dev/null; fi; npx claude-flow@alpha hooks post-command --command \"$CMD\" --track-metrics true'"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "comment": "Store code patterns after successful edits",
            "command": "cat | jq -r '.tool_input.file_path // .tool_input.path // empty' | tr '\\n' '\\0' | xargs -0 -I {} bash -c 'FILE=\"{}\"; if [ -f \"$FILE\" ]; then EXT=\"${FILE##*.}\"; TIMESTAMP=$(date +%s); KEY=\"edit_${EXT}_${TIMESTAMP}\"; DESC=\"Edited $EXT file: $(basename \"$FILE\")\"; npx claude-flow@alpha memory store \"$KEY\" \"$DESC\" --namespace code --reasoningbank --confidence 0.5 2>/dev/null; echo \"üíæ Stored pattern in ReasoningBank\" >&2; fi; npx claude-flow@alpha hooks post-edit --file \"$FILE\" --format true'"
          }
        ]
      }
    ],
    "PreCompact": [
      {
        "matcher": "manual",
        "hooks": [
          {
            "type": "command",
            "comment": "Show session patterns before manual compact",
            "command": "/bin/bash -c 'SESSION_COUNT=$(npx claude-flow@alpha memory stats --reasoningbank 2>/dev/null | grep -oP \"Total.*: \\K[0-9]+\" || echo \"0\"); echo \"üîÑ PreCompact Guidance:\"; echo \"üìã IMPORTANT: Review CLAUDE.md for 54 agents and concurrent patterns\"; echo \"üß† ReasoningBank: $SESSION_COUNT total patterns stored\"; echo \"‚úÖ Ready for compact operation\"'"
          }
        ]
      },
      {
        "matcher": "auto",
        "hooks": [
          {
            "type": "command",
            "comment": "Auto-compact with ReasoningBank context",
            "command": "/bin/bash -c 'TOP_PATTERNS=$(npx claude-flow@alpha memory list --reasoningbank --limit 3 2>/dev/null | grep -oP \"\\d+ patterns\" || echo \"patterns available\"); echo \"üîÑ Auto-Compact (Context Full):\"; echo \"üìö ReasoningBank: $TOP_PATTERNS\"; echo \"‚ö° GOLDEN RULE: Batch all operations in single messages\"; echo \"‚úÖ Auto-compact proceeding with memory context\"'"
          }
        ]
      }
    ],
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "comment": "Consolidate ReasoningBank and generate session summary",
            "command": "bash -c 'echo \"üß† Consolidating ReasoningBank memory...\"; BEFORE=$(npx claude-flow@alpha memory stats --reasoningbank 2>/dev/null | grep -oP \"Total.*: \\K[0-9]+\" || echo \"0\"); npx claude-flow@alpha memory consolidate --reasoningbank --threshold 0.9 --prune-low-confidence 0.2 2>/dev/null && echo \"‚úÖ Consolidated ReasoningBank (before: $BEFORE patterns)\" || echo \"‚ö†Ô∏è Consolidation skipped\"; npx claude-flow@alpha hooks session-end --generate-summary true --persist-state true --export-metrics true; echo \"‚úÖ Session ended - ReasoningBank updated\"'"
          }
        ]
      }
    ]
  },
  "includeCoAuthoredBy": true,
  "enabledMcpjsonServers": ["claude-flow", "ruv-swarm"],
  "statusLine": {
    "type": "command",
    "command": ".claude/statusline-command.sh"
  }
}
