{"version":3,"sources":["../../../../src/cli/simple-commands/config.ts"],"sourcesContent":["/**\n * Config CLI Commands - Manage provider configuration\n */\n\nimport { Command } from 'commander';\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\nimport { ProviderManager } from '../../execution/provider-manager.js';\n\nexport function createConfigCommand(): Command {\n  const config = new Command('config')\n    .description('Manage provider configuration');\n\n  // config set-provider command\n  config\n    .command('set-provider')\n    .description('Set default provider')\n    .argument('<provider>', 'Provider name (anthropic, openrouter, onnx, gemini)')\n    .option('-m, --model <model>', 'Default model for provider')\n    .action(async (provider, options) => {\n      try {\n        const manager = new ProviderManager();\n\n        await manager.setDefaultProvider(provider);\n\n        if (options.model) {\n          await manager.configureProvider(provider, {\n            model: options.model,\n            enabled: true,\n          } as any);\n        }\n\n        console.log(chalk.green(`✓ Default provider set to: ${provider}`));\n        if (options.model) {\n          console.log(chalk.green(`✓ Default model set to: ${options.model}`));\n        }\n      } catch (error: any) {\n        console.error(chalk.red('✗ Error:'), error.message);\n        process.exit(1);\n      }\n    });\n\n  // config list-providers command\n  config\n    .command('list-providers')\n    .alias('list')\n    .description('List configured providers')\n    .option('-f, --format <format>', 'Output format (text, json)', 'text')\n    .action(async (options) => {\n      try {\n        const manager = new ProviderManager();\n        const providers = manager.listProviders();\n        const defaultProvider = manager.getDefaultProvider();\n\n        if (options.format === 'json') {\n          console.log(JSON.stringify({ defaultProvider, providers }, null, 2));\n        } else {\n          console.log(chalk.cyan('\\n📋 Configured Providers:\\n'));\n          console.log(chalk.white(`Default: ${chalk.bold(defaultProvider)}\\n`));\n\n          providers.forEach(provider => {\n            const isDefault = provider.name === defaultProvider;\n            const prefix = isDefault ? chalk.green('●') : chalk.gray('○');\n            const status = provider.enabled ? chalk.green('enabled') : chalk.gray('disabled');\n\n            console.log(`${prefix} ${chalk.bold(provider.name)}`);\n            console.log(`  Model: ${provider.model || 'default'}`);\n            console.log(`  Priority: ${provider.priority || 'balanced'}`);\n            console.log(`  Status: ${status}`);\n            console.log('');\n          });\n        }\n      } catch (error: any) {\n        console.error(chalk.red('✗ Error:'), error.message);\n        process.exit(1);\n      }\n    });\n\n  // config wizard command\n  config\n    .command('wizard')\n    .description('Interactive provider configuration wizard')\n    .action(async () => {\n      try {\n        const manager = new ProviderManager();\n\n        console.log(chalk.cyan('\\n🧙 Provider Configuration Wizard\\n'));\n\n        const answers = await inquirer.prompt([\n          {\n            type: 'list',\n            name: 'defaultProvider',\n            message: 'Select default provider:',\n            choices: [\n              { name: 'Anthropic (Highest quality)', value: 'anthropic' },\n              { name: 'OpenRouter (99% cost savings)', value: 'openrouter' },\n              { name: 'ONNX (Free local inference)', value: 'onnx' },\n              { name: 'Gemini (Free tier)', value: 'gemini' },\n            ],\n          },\n          {\n            type: 'list',\n            name: 'optimization',\n            message: 'Optimization priority:',\n            choices: [\n              { name: 'Balanced (recommended)', value: 'balanced' },\n              { name: 'Cost (cheapest)', value: 'cost' },\n              { name: 'Quality (best results)', value: 'quality' },\n              { name: 'Speed (fastest)', value: 'speed' },\n              { name: 'Privacy (local only)', value: 'privacy' },\n            ],\n          },\n        ]);\n\n        await manager.setDefaultProvider(answers.defaultProvider);\n\n        console.log(chalk.green('\\n✓ Configuration saved successfully!'));\n        console.log(chalk.gray(`\\nDefault provider: ${answers.defaultProvider}`));\n        console.log(chalk.gray(`Optimization: ${answers.optimization}`));\n      } catch (error: any) {\n        console.error(chalk.red('\\n✗ Error:'), error.message);\n        process.exit(1);\n      }\n    });\n\n  return config;\n}\n"],"names":["Command","chalk","inquirer","ProviderManager","createConfigCommand","config","description","command","argument","option","action","provider","options","manager","setDefaultProvider","model","configureProvider","enabled","console","log","green","error","red","message","process","exit","alias","providers","listProviders","defaultProvider","getDefaultProvider","format","JSON","stringify","cyan","white","bold","forEach","isDefault","name","prefix","gray","status","priority","answers","prompt","type","choices","value","optimization"],"mappings":"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"}