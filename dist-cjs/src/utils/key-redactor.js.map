{"version":3,"sources":["../../../src/utils/key-redactor.js"],"sourcesContent":["/**\n * API Key Redaction Utility\n * Prevents sensitive data from leaking into logs, memory, or git commits\n */\n\nexport class KeyRedactor {\n  static API_KEY_PATTERNS = [\n    // Anthropic API keys\n    /sk-ant-[a-zA-Z0-9_-]{95,}/gi,\n\n    // OpenRouter API keys\n    /sk-or-[a-zA-Z0-9_-]{32,}/gi,\n\n    // Google/Gemini API keys\n    /AIza[a-zA-Z0-9_-]{35}/gi,\n\n    // Generic API keys\n    /[a-zA-Z0-9_-]{20,}API[a-zA-Z0-9_-]{20,}/gi,\n\n    // Bearer tokens\n    /Bearer\\s+[a-zA-Z0-9_\\-\\.]{20,}/gi,\n\n    // Environment variable format\n    /([A-Z_]+_API_KEY|[A-Z_]+_TOKEN|[A-Z_]+_SECRET)=[\"']?([^\"'\\s]+)[\"']?/gi,\n\n    // Supabase keys\n    /eyJ[a-zA-Z0-9_-]*\\.eyJ[a-zA-Z0-9_-]*\\.[a-zA-Z0-9_-]*/gi,\n  ];\n\n  static SENSITIVE_FIELDS = [\n    'apiKey',\n    'api_key',\n    'token',\n    'secret',\n    'password',\n    'private_key',\n    'privateKey',\n    'accessToken',\n    'access_token',\n    'refreshToken',\n    'refresh_token',\n  ];\n\n  /**\n   * Redact API keys and sensitive data from text\n   */\n  static redact(text, showPrefix = true) {\n    if (!text) return text;\n\n    let redacted = text;\n\n    // Redact using patterns\n    this.API_KEY_PATTERNS.forEach(pattern => {\n      redacted = redacted.replace(pattern, (match) => {\n        if (showPrefix && match.length > 8) {\n          const prefix = match.substring(0, 8);\n          return `${prefix}...[REDACTED]`;\n        }\n        return '[REDACTED_API_KEY]';\n      });\n    });\n\n    return redacted;\n  }\n\n  /**\n   * Redact sensitive fields in objects\n   */\n  static redactObject(obj, deep = true) {\n    if (!obj || typeof obj !== 'object') return obj;\n\n    const redacted = { ...obj };\n\n    Object.keys(redacted).forEach(key => {\n      const lowerKey = key.toLowerCase();\n\n      // Check if field name is sensitive\n      const isSensitive = this.SENSITIVE_FIELDS.some(field =>\n        lowerKey.includes(field)\n      );\n\n      if (isSensitive && typeof redacted[key] === 'string') {\n        const value = redacted[key];\n        if (value && value.length > 8) {\n          redacted[key] = `${value.substring(0, 4)}...[REDACTED]`;\n        } else {\n          redacted[key] = '[REDACTED]';\n        }\n      } else if (deep && typeof redacted[key] === 'object' && redacted[key] !== null) {\n        redacted[key] = this.redactObject(redacted[key], deep);\n      } else if (typeof redacted[key] === 'string') {\n        // Redact any API keys in string values\n        redacted[key] = this.redact(redacted[key]);\n      }\n    });\n\n    return redacted;\n  }\n\n  /**\n   * Sanitize text for safe logging\n   */\n  static sanitize(text) {\n    return this.redact(text, true);\n  }\n\n  /**\n   * Sanitize command arguments\n   */\n  static sanitizeArgs(args) {\n    return args.map(arg => {\n      // Check if arg is a flag value pair\n      if (arg.includes('key') || arg.includes('token') || arg.includes('secret')) {\n        return this.redact(arg);\n      }\n      return arg;\n    });\n  }\n\n  /**\n   * Check if text contains unredacted sensitive data\n   */\n  static containsSensitiveData(text) {\n    return this.API_KEY_PATTERNS.some(pattern => pattern.test(text));\n  }\n\n  /**\n   * Validate that text is safe for logging/storage\n   */\n  static validate(text) {\n    const warnings = [];\n\n    this.API_KEY_PATTERNS.forEach((pattern, index) => {\n      if (pattern.test(text)) {\n        warnings.push(`Potential API key detected (pattern ${index + 1})`);\n      }\n    });\n\n    return {\n      safe: warnings.length === 0,\n      warnings,\n    };\n  }\n\n  /**\n   * Redact environment variables\n   */\n  static redactEnv(env) {\n    const redacted = {};\n\n    Object.keys(env).forEach(key => {\n      const value = env[key];\n      if (!value) {\n        redacted[key] = '';\n        return;\n      }\n\n      const lowerKey = key.toLowerCase();\n      const isSensitive = lowerKey.includes('key') ||\n                         lowerKey.includes('token') ||\n                         lowerKey.includes('secret') ||\n                         lowerKey.includes('password');\n\n      if (isSensitive) {\n        redacted[key] = value.length > 8\n          ? `${value.substring(0, 4)}...[REDACTED]`\n          : '[REDACTED]';\n      } else {\n        redacted[key] = value;\n      }\n    });\n\n    return redacted;\n  }\n}\n\n// Export singleton instance\nexport const redactor = KeyRedactor;\n"],"names":["KeyRedactor","API_KEY_PATTERNS","SENSITIVE_FIELDS","redact","text","showPrefix","redacted","forEach","pattern","replace","match","length","prefix","substring","redactObject","obj","deep","Object","keys","key","lowerKey","toLowerCase","isSensitive","some","field","includes","value","sanitize","sanitizeArgs","args","map","arg","containsSensitiveData","test","validate","warnings","index","push","safe","redactEnv","env","redactor"],"mappings":"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"},GAAG,CAACrB,IAAI;YACtB,IAAI,CAACO,OAAO;gBACVpB,QAAQ,CAACa,IAAI,GAAG;gBAChB;YACF;YAEA,MAAMC,WAAWD,IAAIE,WAAW;YAChC,MAAMC,cAAcF,SAASK,QAAQ,CAAC,UACnBL,SAASK,QAAQ,CAAC,YAClBL,SAASK,QAAQ,CAAC,aAClBL,SAASK,QAAQ,CAAC;YAErC,IAAIH,aAAa;gBACfhB,QAAQ,CAACa,IAAI,GAAGO,MAAMf,MAAM,GAAG,IAC3B,GAAGe,MAAMb,SAAS,CAAC,GAAG,GAAG,aAAa,CAAC,GACvC;YACN,OAAO;gBACLP,QAAQ,CAACa,IAAI,GAAGO;YAClB;QACF;QAEA,OAAOpB;IACT;AACF;AAGA,OAAO,MAAMmC,WAAWzC,YAAY"}